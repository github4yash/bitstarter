{
  "name": "Bitstarter",
  "tagline": "My bitstarter project - startup engineering",
  "body": "# Preamble\r\nThis codebase here has been forked and modified using the instructions below. \r\nSo this code is ready to be used whereas the instructions below walk you through the \r\nsteps you need to do to get to this state.\r\n\r\nI have deployed this code at [Heroku] (http://github4yash-bitstarter-mooc.herokuapp.com) check it out.\r\n\r\n# Overview\r\n\r\nThis is a simple template app for a Bitcoin-based crowdfunding site that\r\nadds even more server-side and client-side dynamic behavior over our\r\n[earlier template](https://github.com/startup-class/bitstarter-ssjs-db). It\r\nuses three of the four technologies in the so-called\r\n[MEAN stack](http://mean.io): [Express](http://expressjs.com) (E),\r\n[Angular](http://angularjs.com) (A), and [Node](http://nodejs.com) (N), and\r\nreplaces [MongoDB](http://mongodb.com) / [Mongoose](http://mongoosejs.com)\r\n(M) with [PostgreSQL](http://postgresql.org) /\r\n[Sequelize](http://sequelizejs.com). The app illustrates several of the\r\nfollowing conceptual topics:\r\n\r\n- Implementing multiple routes\r\n    ([1](https://github.com/startup-class/bitstarter-leaderboard/blob/master/web.js#L89),\r\n    [2](https://github.com/startup-class/bitstarter-leaderboard/blob/master/routes.js#L111))\r\n\r\n- Factoring out constants/settings into separate files\r\n    ([1](https://github.com/startup-class/bitstarter-leaderboard/blob/master/constants.js),\r\n    [2](https://github.com/startup-class/bitstarter-leaderboard/blob/master/routes.js#L43))\r\n\r\n- Factoring out secure server-side configuration variables into `.env` files \r\n    ([1](https://github.com/startup-class/bitstarter-leaderboard/blob/master/.env.dummy), \r\n     [2](https://devcenter.heroku.com/articles/config-vars))\r\n\r\n- Using `async.series` to force a database update, followed by a launch of the\r\n    webserver\r\n    ([1](https://github.com/startup-class/bitstarter-leaderboard/blob/master/web.js#L97))\r\n\r\n- Using `async.mapLimit` and `async.eachLimit` to limit the number of simultaneous queries to a remote API and to a database respectively\r\n    ([1](https://github.com/startup-class/bitstarter-leaderboard/blob/master/models/coinbase.js#L60), \r\n     [2](https://github.com/startup-class/bitstarter-leaderboard/blob/master/models/order.js#L73))\r\n\r\n- Using asynchronous code to set up a recurring background process (a \"daemon\")\r\n    ([1](https://github.com/startup-class/bitstarter-leaderboard/blob/master/web.js#L110))\r\n\r\n- Visualizing ORM instances in the browser\r\n    ([1](https://github.com/startup-class/bitstarter-leaderboard/blob/master/routes.js#L55),\r\n    [2](https://github.com/startup-class/bitstarter-leaderboard/blob/master/views/orderpage.ejs#L24))\r\n\r\n- Client-side templating with [AngularJS](http://angularjs.org)\r\n    ([1](https://github.com/startup-class/bitstarter-leaderboard/blob/master/views/homepage.ejs#L70),\r\n    [2](https://github.com/startup-class/bitstarter-leaderboard/blob/master/public/js/controllers.js#L17),\r\n    [3](https://github.com/startup-class/bitstarter-leaderboard/blob/master/routes.js#L61))\r\n\r\n- Server-side templating with [Embedded JS templates](http://embeddedjs.com/)\r\n    ([1](https://github.com/startup-class/bitstarter-leaderboard/blob/master/routes.js#L42),\r\n    [2](https://github.com/startup-class/bitstarter-leaderboard/blob/master/views/homepage.ejs),\r\n    [3](https://github.com/startup-class/bitstarter-leaderboard/blob/master/routes.js#L55),\r\n    [4](https://github.com/startup-class/bitstarter-leaderboard/blob/master/views/orderpage.ejs))\r\n\r\n- Making a request to a remote API both on the server and in client-side code\r\n    ([1](https://github.com/startup-class/bitstarter-leaderboard/blob/master/models/order.js#L138),\r\n    [2](https://github.com/startup-class/bitstarter-leaderboard/blob/master/models/coinbase.js#L42),\r\n    [3](https://github.com/startup-class/bitstarter-leaderboard/blob/master/models/coinbase.js#L54),\r\n    [4](https://github.com/startup-class/bitstarter-leaderboard/blob/master/public/js/controllers.js#L18))\r\n\r\n- Setting up a simple API\r\n    ([1](https://github.com/startup-class/bitstarter-leaderboard/blob/master/routes.js#L61),\r\n     [2](https://github.com/startup-class/bitstarter-leaderboard/blob/master/public/js/controllers.js#L16))\r\n\r\n- Reusing code by putting object manipulation code into instance/class methods\r\n    ([1](https://github.com/startup-class/bitstarter-leaderboard/blob/master/routes.js#L83),\r\n    [2](https://github.com/startup-class/bitstarter-leaderboard/blob/master/web.js#L101),\r\n    [3](https://github.com/startup-class/bitstarter-leaderboard/blob/master/web.js#L112))\r\n\r\n- Setting up a basic AngularJS controller\r\n    ([1](https://github.com/startup-class/bitstarter-leaderboard/blob/master/views/homepage.ejs#L70),\r\n    [2](https://github.com/startup-class/bitstarter-leaderboard/blob/master/public/js/controllers.js#L17))\r\n\r\nLet's install the app and then take a tour of the functionality.\r\n\r\n# Installation\r\nTo get the app up and running, execute the following commands on your EC2\r\ninstance:\r\n\r\n```sh\r\ncurl https://raw.github.com/startup-class/setup/master/setup.sh | bash\r\nexit # and then log in again\r\ngit clone https://github.com/startup-class/bitstarter-leaderboard.git\r\ncd bitstarter-leaderboard\r\n./setup-ssjs.sh\r\n```\r\n\r\n## Running Locally on an EC2 Instance\r\nOnce you have done this you will need to :\r\n \r\n1. Copy the [.env.dummy](.env.dummy) file into `.env` and include your API\r\nkey from http://coinbase.com/account/integrations so that it looks like the\r\nsnippet below. Note that `COINBASE_API_KEY` is a secure API key that should\r\nnever be checked into a git repository; that's why we exclude it in the\r\n[.gitignore](.gitignore).\r\n\r\n```bash\r\n$ cp .env.dummy .env\r\n$ emacs -nw .env  # Add key from coinbase.com/account/integrations\r\n$ cat .env\r\nCOINBASE_API_KEY=cb27e2ef0a8872f7923612d4d57937e70476ab8041455b00b35d1196cf80f50d\r\nPORT=8080\r\n```\r\n\r\n2. Edit the [constants.js](.constants.js) file to include the\r\npreorder button from http://coinbase.com/merchant_tools. This is a non-secure\r\ncode that is meant to be embedded in a public-facing webpage, so it's ok if\r\nyou check this into git.\r\n\r\n```js\r\n  COINBASE_PREORDER_DATA_CODE: \"13b56883764b54e6ab56fef3bcc7229c\",\r\n```\r\n\r\n3. Now you can run the server locally and preview at a URL like\r\nhttp://ec2-54-213-131-228.us-west-2.compute.amazonaws.com:8080 as follows:\r\n\r\n```sh\r\nforeman start\r\n```\r\n\r\nYou can determine the hostname of your EC2 instance conveniently with this\r\ncommand:\r\n\r\n```sh\r\ncurl -s http://169.254.169.254/latest/meta-data/public-hostname\r\n# ec2-54-213-192-71.us-west-2.compute.amazonaws.com\r\n```\r\n\r\nTry placing some orders and then going to the \"/orders\" URL at the top to\r\nsee them recorded. Also refresh the page to see the thermometer update. Note\r\nthat you will get an error if you didn't do the `.env` step above.\r\n\r\n## Running Remotely\r\nOnce the app works via `foreman start` on your EC2 machine, you can deploy to Heroku and push\r\nthe configuration variables defined in `.env` as follows:\r\n\r\n```sh\r\ngit push heroku master\r\nheroku config:push\r\n```\r\nThen you can go to a URL like http://safe-dawn-4440.herokuapp.com and submit\r\norders to test it out. Note again that you will get an \"invalid api key\"\r\nerror if you didn't do the `.env` step above.\r\n\r\n# Concepts\r\n\r\n## File Structure\r\nLet's begin by taking a quick look at the files in the app. First, the major\r\ndifferences from\r\n[github.com/startup-class/bitstarter-ssjs-db](http://github.com/startup-class/bitstarter-ssjs-db)\r\nare as follows:\r\n\r\n-   `index.html` is now replaced by the more sophisticated `views/homepage.ejs` template\r\n-   `.pgpass` has a newline added to it, and a corresponding\r\n-   CSS and JS have been pulled out of index.html and into `public/css` and `public/js`\r\n-   A good deal of content has been added to the static files directory to\r\n    reduce the number of HTTP requests to external servers.\r\n\r\nNow let's go file by file:\r\n\r\n| Path                                                                     | Description                                                                                   |\r\n|-------------------------------------------------------------------------:|:----------------------------------------------------------------------------------------------|\r\n| [.env.dummy](.env.dummy)                                                 | Used as template for .env. Has COINBASE\\_API\\_KEY from coinbase.com/account/integrations      |\r\n| [.pgpass](.pgpass)                                                       | Used by pgsetup.sh to instantiate the db                                                      |\r\n| [constants.js](constants.js)                                             | Several constants, including COINBASE\\_PREORDER\\_DATA\\_CODE from coinbase.com/merchant\\_tools |\r\n| [models/coinbase.js](models/coinbase.js)                                 | Define a set of functions that downloads and parses remote Order data from Coinbase           |\r\n| [models/index.js](models/index.js)                                       | Initialize the connection between Sequelize and the PostgreSQL db.                            |\r\n| [models/order.js](models/order.js)                                       | Define an Order class that works with data from the \"Order\" table in the PostgreSQL db        |\r\n| [package.json](package.json)                                             | Specify dependencies for the app                                                              |\r\n| [pgsetup.sh](pgsetup.sh)                                                 | Invoked by setup-ssjs.sh to create the Postgres DB.                                           |\r\n| [Procfile](Procfile)                                                      | Heroku file that determines which processes are run upon deployment                           |\r\n| [public/css/bitstarter-styles.css](public/css/bitstarter-styles.css)     | CSS styles for views/homepage.ejs                                                             |\r\n| [public/fonts/opensans-300.woff](public/fonts/opensans-300.woff)         | Google Font file                                                                              |\r\n| [public/fonts/ubuntu-300.woff](public/fonts/ubuntu-300.woff)             | Google Font file                                                                              |\r\n| [public/fonts/ubuntu-700.woff](public/fonts/ubuntu-700.woff)             | Google Font file                                                                              |\r\n| [public/img/480x300.gif](public/img/480x300.gif)                         | Placeholder image                                                                             |\r\n| [public/img/favicon.ico](public/img/favicon.ico)                         | Favorite icon ('favicon') for bookmarks/favorites                                             |\r\n| [public/js/angular.min.js](public/js/angular.min.js)                     | Angular JS file (see angularjs.org). Used for thermometer on frontpage.                       |\r\n| [public/js/coinbase-post-payment.js](public/js/coinbase-post-payment.js) | Stub code to use once Coinbase fixes the coinbase\\_payment\\_complete event.                   |\r\n| [public/js/controllers.js](public/js/controllers.js)                     | Angular JS controllers. Contains controller for the thermometer in homepage.ejs.              |\r\n| [public/js/google-analytics.js](public/js/google-analytics.js)           | One of the two Google Analytics scripts. For ga.js.                                           |\r\n| [README.md](README.md)                                                   | Documentation                                                                                 |\r\n| [routes.js](routes.js)                                                   | Define the routes for the app: functions executed when specific URLs are requested.           |\r\n| [setup-ssjs.sh](setup-ssjs.sh)                                           | Set up an EC2 instance. Invokes pgsetup.sh                                                    |\r\n| [views/homepage.ejs](views/homepage.ejs)                                 | Template for the index (served up for example.com/)                                           |\r\n| [views/orderpage.ejs](views/orderpage.ejs)                               | Template for the order page (served up for example.com/orders)                                |\r\n| [web.js](web.js)                                                         | Initialize express app, syncs db, and start HTTP server                                       |\r\n\r\n\r\n\r\n# Server-Side\r\n\r\n## Express ('E' in MEAN)\r\n\r\nWe use [Express](http://expressjs.org) to set up our web server. Skim the\r\nExpress [documentation](http://expressjs.org) and then take a look at\r\n[web.js](web.js)\r\nand\r\n[routes.js](routes.js)\r\nto see how we set up the app and the valid routes. We've also factored out\r\nmany static assets into subdirectories into [/public](public/).\r\n\r\nRecall again that static assets are files that do not change. When users\r\nrequest `example.com/img/480x300.gif` they will get the same file every time\r\n(a static response). By contrast, a web page with content that changes based\r\non client- or server-side parameters is a dynamic web page; for example,\r\nwhen a user requests `example.com/orders` they will see something that\r\ndepends on the state of the database and thus will vary over time.\r\n\r\nNote that in [routes.js](routes.js), we try to separate the code that\r\nhandles requests and responses from the code that actually manipulates\r\ninstances of the [Order](models/order.js) class. This illustrates a general\r\nprinciple: as much as possible, you should ask objects to manipulate\r\nthemselves with instance methods and/or class methods rather than try to\r\nwork with an object's guts externally; see\r\n[models/order.js](models/order.js) for details of doing this. We'll talk\r\nmore about how this is done in the\r\n[ORM section](dborm-postgresql-and-sequelize-replaces-m-in-mean) below, but\r\nfor now note that most request handlers have the form of asking `global.db`\r\nfor some data and then packing that data into an HTTP response of some kind.\r\n\r\nIn sum, Express is used here to organize the functions that are executed on\r\nthe server to generate an HTTP response from an HTTP request - that is, to\r\nstructure our webapp.\r\n\r\n## Server-Side Templating\r\n\r\nFor illustrative purposes, we do two kinds of templating in this app:\r\nserver-side templating of [views/homepage.ejs](views/homepage.ejs) and [views/orderpage.ejs](views/orderpage.ejs), and\r\nclient-side templating in the thermometer on the homepage via Angular JS\r\n(also in [views/homepage.ejs](views/homepage.ejs#L70).\r\n\r\nLet's talk about server-side templating first. The specific templating\r\nengine here is set up in [web.js](web.js), where we tell Express that `.ejs`\r\n([Embedded Javascript](http://embeddedjs.com)) files are our templates of choice via the line\r\n[app.set('view engine', 'ejs')](web.js#L82).\r\n\r\nConsider [indexfn](routes.js#L41) in routes.js. This uses\r\n[response.render](http://expressjs.com/api.html#res.render) to take the file\r\n`views/homepage.ejs` and populate it with a JSON data structure. Specifically,\r\nthe [response.render invocation](routes.js#L42) looks for variables in\r\n`views/homepage.ejs` (like\r\n[<%= coinbase_preorder_data_code %>](views/homepage.ejs#L115) ) and replaces\r\nthem with the corresponding field of the JSON data structure as defined in\r\n[constants.js](constants.js#L33). It then wraps this in an HTTP response and\r\nreturns it to the client.\r\n\r\nA slightly more complex example is in [orderfn](routes.js#L53), also in\r\n`routes.js`.  Here we use the `orders_json` JSON data structure to populate\r\nthe `views/orderpage.ejs` file via `response.render`, similar to what we did\r\nin `indexfn`. The main difference is that we put this logic\r\nin a callback and send it into\r\n[global.db.Order.allToJSON](models/order.js#L28), executing it right after\r\nthe `orders` variable is built up via ORM and database operations.\r\n\r\nThese two examples illustrate the basic idea of server-side\r\ntemplating. Rather than returning a fully static file like\r\n`public/img/480x300.gif`, we separate out the static and dynamic\r\nportions. We put the parts that don't change (the static parts) into a\r\ntemplate like `views/orderpage.ejs` and then populate this template\r\ndynamically with the remainder, returning the response to the client. All of\r\nthis is done on the server and the computation is invisible to the client;\r\nthey can't view the `orders` variable directly, for example, by looking at\r\n[Network Requests](http://net.tutsplus.com/tutorials/chrome-dev-tools-networking-and-the-console/)\r\nin the Chrome Developer Tools. They just see one HTTP response in response\r\nto their HTTP request.\r\n\r\n## DB/ORM: PostgreSQL and Sequelize (Replaces 'M' in MEAN)\r\n\r\nIn this app we have a simple PostgreSQL relational database underlying the\r\napp that keeps a local mirror of the remote order data on Coinbase's\r\nservers. We create the db by running [setup-ssjs.sh](setup-ssjs.sh), which\r\nin turn invokes [pgsetup.sh](pgsetup.sh). We interface with this database\r\nvia the Sequelize Object-Relational Mapper (ORM), which provides a\r\nJavascript API to a relational database. The following figure provides an\r\noverview; take a look at it and then read the subsequent documentation:\r\n\r\n<div style=\"text-align:center;\">\r\n  <img width=\"100%\"\r\n       src=\"https://d396qusza40orc.cloudfront.net/startup/images/bitstarter-leaderboard/fig1.png\">\r\n</div>\r\n\r\nWhile this kind of setup is canonical, it's worth asking a few questions\r\nabout why a relational database and object-relational mapper combination is\r\nso common in web applications today.\r\n\r\n- *Why use a DB?* First, you might ask why we don't simply keep the order data\r\nin a simple `.json` file and then reload it when the app boots up. This is\r\nthe so-called 'flatfile' approach. We could certainly do this, but as our\r\napp scales and we get more and more data this approach has issues. For one\r\nthing, we would find it painful to modify the `.json` file simultaneously if\r\nwe had multiple web-servers writing to the same dataset. For another, a\r\nnaive `.json` file saved on disk will be very slow to search. As a third\r\npoint, we may wish to extract information from this `.json` file in a\r\ndifferent manner from the way in which we saved it. Each of these things -\r\nparallelized reads/writes, rapid searching, and easy reporting via the\r\nStructured Query Language (SQL) - is facilitated by converting our data from\r\nflatfiles and keeping it in a relational database like PostgreSQL.\r\n\r\n- *Why use an ORM with the DB?* Second, given that we are using a relational\r\ndatabase, you might then ask why we don't simply interface directly with the\r\nrelational database via a low-level library like `node-postgres`, which\r\nallows us to run SQL statements directly against the database. Why take on\r\nthe overhead of an Object-Relational Mapper like Sequelize? The answer is\r\nthat the so-called 'Active Record Paradigm' is a good match for many\r\nwebapps. In a nutshell, the idea is that it is often very useful to conceive\r\nof tables in a relational database as mapping directly to classes, while\r\nrows of these tables contain the data for instances. In this framework the\r\nentire database can be thought of as an elaborate\r\nserialization/deserialization apparatus for Javascript objects. You\r\nrehydrate individual instances of JS classes from disk during the life of a\r\nprogram, and then dehydrate them and put them in cold storage (the\r\nrelational database) when no longer needed in memory. That said, it's\r\nimportant to keep in mind that an ORM is a convenience and not a panacea:\r\njust as with flatfiles it is true that sometimes the Active Record paradigm\r\nbreaks down and you need to directly interface with the database via SQL\r\nstatements, for performance reasons or because you're doing some sort of\r\nreport or dashboard that accesses the data via columns even though you saved\r\nit across rows.\r\n\r\n- *Why use a relational DB rather than a NoSQL DB?* As a third point, you\r\nmight note that this combination of Sequelize and PostgreSQL replaces the\r\nMongoose/MongoDB combination which is the 'M' in the MEAN stack. Why don't\r\nwe just use the so-called [NoSQL](http://en.wikipedia.org/wiki/NoSQL)\r\nMongoose/MongoDB combo? Well, Mongoose/MongoDB is certainly one way to go if\r\nyou really want a completely full-stack JS app. However, PostgreSQL has\r\nexcellent support for JS and JSON nowadays, and is more mature than\r\nMongoDB. Moreover, the advantages of a so-called schemaless or NoSQL\r\napproach are greatest at the beginning of an app when the\r\n[schema](http://en.wikipedia.org/wiki/Database_schema) is changing rapidly,\r\nbut eventually it actually becomes useful to have a schema to catch errors\r\nand prevent invalid operations. You will often find yourself reinventing a\r\nschema in code if you go down the MongoDB path, albeit without the extent of\r\nlow-level schema support provided by a relational DB like PostgreSQL.\r\n\r\nOnce we've decided on an ORM/DB combination, in general we want to keep most\r\ncode related to manipulating data from the database in the corresponding\r\nclass or instance methods (in our case in `models/order.js`). As a rough\r\nrule of thumb, class methods operate on every instance in the class\r\n(e.g. counts and totals), while instance methods access data associated with\r\nparticular instances. So as an example you'd use a class method (like\r\n`Order.totals`) to sum up the total amount of Bitcoin sent over all orders,\r\nwhile you'd use an instance method (like a hypothetical\r\n`myorder.amountInUSD` method) to determine the equivalent USD amount for a\r\ngiven order in BTC. The latter method call needs the amount data on a\r\nspecific `Order` instance, so it should be an instance method (though you\r\nmight request and cache the exchange rate itself via a class method).\r\n\r\nWe put these class and instance method definitions in `order.js`, within the\r\nthe `sequelize.define` invocation (see [here](http://sequelizejs.com/documentation#models-expansion-of-models)). The main tricky part here is\r\nthe value of `this`. Within a class method it refers to the entire class (in\r\nthis case `Order`) while within an instance method it refers to a particular\r\ninstance (e.g. `myorder`). Sometimes you need to save this variable and pass\r\nit in to a callback; we do this in `addFromJSON` to make the `Order` class\r\naccessible within a callback that runs on each individual instance. \r\n\r\nFinally, here are some examples of working with the ORM in the node REPL.\r\n\r\n```js\r\n    // Execute from within the top level directory after pgsetup:\r\n    > require('./models')\r\n    > global.db.Order.numOrders()\r\n    Executing: SELECT count(*) as \"count\" FROM \"Orders\";\r\n    There are 25 Orders\r\n    \r\n    > var foo = [];\r\n    > global.db.Order.findAll().success(function(_orders) { global['foo'].push(_orders);});\r\n    > var orders = foo[0];\r\n    > orders[0].repr()\r\n    { coinbase_id: '84XZQO6L',\r\n      amount: 0.0001,\r\n      time: '2013-08-10T10:31:33-07:00',\r\n      id: 131,\r\n      createdAt: Fri Aug 10 2013 19:57:29 GMT+0000 (UTC),\r\n      updatedAt: Fri Aug 10 2013 19:57:29 GMT+0000 (UTC) }\r\n```\r\n\r\n# Client-Side\r\n\r\n## Client-Side Templating\r\n\r\nWe previously discussed server-side templating and how we combine a static\r\ntemplate (from `order.ejs` or `homepage.ejs`) with dynamic JSON data to create\r\na dynamic HTTP response that varies with the state of the database. If you\r\nrecall, our `homepage.ejs` was partially templated on the server-side in the\r\n`indexfn` within `routes.js` by replacement of the portions surrounded by\r\nspecial brackets, like the value of `name` below.\r\n\r\n```html\r\n      <span class=\"icon-bar\"></span>\r\n      <span class=\"icon-bar\"></span>\r\n    </button>\r\n    <a class=\"brand\" href=\"#\"><%= name %></a>\r\n    <div class=\"nav-collapse collapse\">\r\n      <ul class=\"nav\">\r\n        <li class=\"active\"><a href=\"#\">Home</a></li>\r\n        <li><a href=\"#about\">About</a></li>\r\n```\r\n\r\nHowever, you might have noticed an alternative bracket syntax coexisting\r\nwithin the `homepage.ejs` file, as shown surrounding `num_orders` below:\r\n\r\n```html\r\n    <div class=\"span5 actions\" ng-controller=\"OrdersCtrl\">\r\n      <div class=\"row-fluid\">\r\n      <div class=\"span8 offset2\">\r\n        <div class=\"row-fluid statistics\">\r\n          <div ng-show=\"!error\">\r\n            <div class=\"span4\">\r\n              <!-- linediv-l and linediv-r give dividing lines that look\r\n              different in horizontal and vertical layouts, illustrating\r\n              media queries. -->\r\n              <div class=\"linediv-l\">\r\n              <h3>{{num_orders}}</h3> <p>backers</p>\r\n              </div>\r\n            </div>\r\n```\r\n\r\nThis is because in `homepage.ejs` we are also using a second kind of\r\ntemplating: client-side templating. It is similar in concept to server-side\r\ntemplating, except the population of the static template with the JSON data\r\noccurs on the client side. Among other things, this means the client has\r\naccess to a JSON API that is returning some data. \r\n\r\nIn this app, the place that we're doing some client-side templating is in\r\nthe thermometer element. The data that comes from `/api/orders` is being\r\nused to update the thermometer. If you submit an order in a separate window,\r\nand wait for the Coinbase data to be refreshed (via the `setInterval` daemon\r\nin `web.js`) or manually refresh it yourself (by requesting\r\n`/refresh_orders`), the thermometer will then update upon a homepage\r\nrefresh. You can think of this client-side templating implementation as\r\nsimply populating the template variables in `homepage.ejs` with data on the\r\nclient-side rather than on the server.\r\n\r\n## Angular: Two-Way Data Binding ('A' in MEAN)\r\n\r\nBut things are a little more complicated than that. We're actually using a\r\nclient-side framework called [AngularJS](http://docs.angularjs.org/guide/concepts) which offers something much more\r\nsophisticated than simple templating. It actually does full-on two-way\r\ndatabinding; see here for the [concept](http://docs.angularjs.org/guide/dev_guide.templates.databinding) and here for a worked [example](http://docs.angularjs.org/guide/forms). The\r\nbasic difference between one-way templating and two-way databinding is that\r\nin one-way templating the data is just used to populate variables in a\r\ntemplate (e.g. `homepage.ejs`). In two-way databinding, however, actions on\r\nelements of a templated page (like clicking a button or typing into a form\r\nfield) can in turn change the underlying data. Indeed, you can set it up\r\nsuch that the same data is editable from several different places within a\r\npage. Again, see here for the [concept](http://docs.angularjs.org/guide/dev_guide.templates.databinding) and here for a worked [example](http://docs.angularjs.org/guide/forms). We\r\naren't using all the features of two-way databinding in our thermometer, but\r\nit's worth understanding how Angular works in a simple use case.\r\n\r\nTo trace through the logic of how we're using Angular in our simple app,\r\nlet's start with the four Angular directives that we're using in\r\n`homepage.ejs`: `ng-app`, `ng-show`, `ng-style`, and `ng-controller`. First,\r\nwe put `ng-app` at the top of the file and include `angular.min.js`. Once\r\nthe Javascript from `angular.min.js` is parsed and run by the browser, it\r\nwill look through the DOM, find the `ng-app` declaration, and treat\r\neverything underneath that node as subject to control/updating by\r\nAngular. For simplicity, in this case we put `ng-app` at the very top node,\r\nin the `<html>` tag.\r\n\r\n```html\r\n    <!DOCTYPE html>\r\n    <html lang=\"en\" ng-app>\r\n      <head>\r\n        <meta charset=\"utf-8\">\r\n        <title><%= title %></title>\r\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n        <script src=\"https://d396qusza40orc.cloudfront.net/startup/code/jquery.js\"></script>\r\n        <script src=\"https://d396qusza40orc.cloudfront.net/startup/code/bootstrap.js\"></script>\r\n        <script src=\"js/angular.min.js\" ></script>\r\n        <script src=\"js/controllers.js\"></script>\r\n    ...\r\n```\r\n\r\nThen, towards the middle of the file, we use three directives: `ng-show`,\r\n`ng-style`, and `ng-controller`. Of these, `ng-controller` is the most\r\nimportant. It sets up a relationship between this div and the code in\r\n`public/js/controllers.js`, which defines the `OrdersCtrl` function. If you\r\nlook at [public/js/controllers.js](public/js/controllers.js), it initiates an HTTP request to\r\n`/api/orders`, and uses the results to set up variables like `num_orders`\r\nand `total_funded`. It then uses these variables to populate the template\r\nexpressions like `{{num_orders}}`.\r\n\r\nWe use the `ng-show` directive to set up conditional logic on the basis of\r\nwhether or not the `OrdersCtrl` function call returned an error or not. If\r\nit did not (`!error`) then we display the thermometer stats. If an error was\r\nreturned, we display an error message. Finally `ng-style` is used to apply a\r\nCSS style to an element dynamically based on one of the variables set up by\r\n`OrdersCtrl`, namely `percentage_funded`.\r\n\r\n```html\r\n  <!-- We define a new 'actions' div to contain statistics, order, and share buttons.-->\r\n  <div class=\"span5 actions\" ng-controller=\"OrdersCtrl\">\r\n    <div class=\"row-fluid\">\r\n    <div class=\"span8 offset2\">\r\n      <div class=\"row-fluid statistics\">\r\n        <div ng-show=\"!error\">\r\n          <div class=\"span4\">\r\n            <!-- linediv-l and linediv-r give dividing lines that look\r\n            different in horizontal and vertical layouts, illustrating\r\n            media queries. -->\r\n            <div class=\"linediv-l\">\r\n            <h3>{{num_orders}}</h3> <p>backers</p>\r\n            </div>\r\n          </div>\r\n          <div class=\"span4\">\r\n            <div class=\"linediv-c\">\r\n              <h3>{{total_funded}}</h3> <p>of {{target}} <span class=\"currency\">{{unit_symbol}}</span></p>\r\n            </div>\r\n          </div>\r\n          <div class=\"span4\">\r\n            <div class=\"linediv-r\">\r\n            <h3>{{days_left}}</h3> <p>days left</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div ng-show=\"error\">\r\n          <h3>{{error}}</h3>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"row-fluid\" ng-show=\"!error\">\r\n    <div class=\"span10 offset1\">\r\n      <!-- Bootstrap progress bar -->\r\n      <!-- http://twitter.github.io/bootstrap/components.html#progress -->\r\n      <div class=\"thermometer progress active\">\r\n        <div class=\"bar bar-success\" ng-style=\"{'width': percentage_funded+'%'}\"></div>\r\n        <div class=\"bar bar-warning\" ng-style=\"{'width': (100-percentage_funded)+'%'}\"></div>\r\n      </div>\r\n    </div>\r\n    </div>\r\n    <div class=\"row-fluid\">\r\n      <div class=\"span6 offset3 order\">\r\n        <a class=\"coinbase-button\" \r\n           data-button-style=\"custom_large\" \r\n           data-button-text=\"Preorder with Bitcoin\" \r\n           data-custom=\"Finished order\"\r\n           data-code=\"<%= coinbase_preorder_data_code %>\" \r\n           href=\"https://coinbase.com/checkouts/<%= coinbase_preorder_data_code %>\">Preorder with Bitcoin</a>\r\n      </div>\r\n    </div>\r\n    <div class=\"row-fluid\">\r\n    <div class=\"span9 offset3 social\">\r\n      <!-- AddThis Button BEGIN -->\r\n      <div class=\"addthis_toolbox addthis_default_style\">\r\n         <a class=\"addthis_button_tweet\" tw:via=\"<%= twitter_username %>\" tw:text=\"<%= twitter_tweet %>\"></a>\r\n      </div>\r\n      <script type=\"text/javascript\" src=\"//s7.addthis.com/js/300/addthis_widget.js#pubid=xa-5214a5fe5dbdc2b4\"></script>\r\n      <!-- AddThis Button END -->\r\n    </div>\r\n    </div>\r\n  </div>\r\n  </div>\r\n</div>\r\n```\r\n\r\nTo trace through the logic of how the thermometer data is populated, see the\r\n`/api/orders` route in the next section.\r\n\r\n# Figures\r\n\r\nThe following figures illustrate how the server-side and client-side\r\ncomponents of the app work together by tracing the path of the four routes\r\nimplemented in our app: `/`, `/api/order`, `/refresh_orders`, and\r\n`/orders/`.\r\n\r\nWarning: these figures are large. You can also download PDF versions here:\r\n[1](https://d396qusza40orc.cloudfront.net/startup/images/bitstarter-leaderboard/fig1.pdf), [2](https://d396qusza40orc.cloudfront.net/startup/images/bitstarter-leaderboard/fig2.pdf), [3](https://d396qusza40orc.cloudfront.net/startup/images/bitstarter-leaderboard/fig3.pdf),\r\n[4](https://d396qusza40orc.cloudfront.net/startup/images/bitstarter-leaderboard/fig4.pdf), [5](https://d396qusza40orc.cloudfront.net/startup/images/bitstarter-leaderboard/fig5.pdf). \r\n\r\n\r\n## The `/` route\r\n\r\nFirst, let's take a look at how an HTTP request to `example.com/` is handled\r\nby our app. This about as simple as it gets in terms of generating a dynamic\r\nHTTP response from an HTTP request; there's no database interaction and a\r\nsimple template is populated with some constant JSON data and returned to\r\nthe client.\r\n\r\n<div style=\"text-align:center;\">\r\n  <img width=\"100%\"\r\n       src=\"https://d396qusza40orc.cloudfront.net/startup/images/bitstarter-leaderboard/fig2.png\">\r\n</div>\r\n\r\n## The `/orders` route\r\n\r\nNow let's look at a more complicated route, an HTTP request to\r\n`/orders`. This request now involves hitting the database via the ORM and\r\nusing that data to populate the `orderpage.ejs` template. This is perhaps\r\nthe most common way to generate a dynamic response.\r\n\r\n<div style=\"text-align:center;\">\r\n  <img width=\"100%\"\r\n       src=\"https://d396qusza40orc.cloudfront.net/startup/images/bitstarter-leaderboard/fig3.png\">\r\n</div>\r\n\r\n## The `/refresh_orders` route\r\n\r\nNow let's increase the level of complexity a little more, and show how to\r\nimplement a route that doesn't directly return an HTTP response, but that\r\nredirects to the `/orders` route after performing a database operation.\r\n\r\n<div style=\"text-align:center;\">\r\n  <img width=\"100%\"\r\n       src=\"https://d396qusza40orc.cloudfront.net/startup/images/bitstarter-leaderboard/fig4.png\">\r\n</div>\r\n\r\n## The `/api/orders` route\r\n\r\nFinally, let's take a look at a fairly sophisticated route. This route is\r\nnever meant to be called directly by the end user; it's actually used by the\r\nclient-side code in the thermometer on the front page to refresh itself from\r\nthe latest set of orders in the database.\r\n\r\n<div style=\"text-align:center;\">\r\n  <img width=\"100%\"\r\n       src=\"https://d396qusza40orc.cloudfront.net/startup/images/bitstarter-leaderboard/fig5.png\">\r\n</div>\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}